import logging
import sqlite3
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', 
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –í—Å—Ç–∞–≤—å—Ç–µ —Å—é–¥–∞ —Ç–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ –±–æ—Ç–∞
BOT_TOKEN = "—á—Ç–æ –¥—É–º–∞–ª–∏ –ø–æ–∫–∞–∂—É –≤–∞–º —Ç–æ–∫–µ–Ω –±–æ—Ç–∞?))" # –≤ –±—É–¥—É—â–µ–º –Ω–∞–¥–æ —Å–¥–µ–ª–∞—Ç—å —ç—Ç–æ –≤ . env —Å–∫—Ä—ã—Ç–æ

# –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ (username –±–µ–∑ @)
ADMINS = ["makarburnashev", "work_man02"]

# –¢–µ–∫—Å—Ç—ã –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
WELCOME_TEXT = "–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –Ω–∞–π—Ç–∏ –∫–æ–º–ø–∞–Ω–∏—é –¥–ª—è —É—á–µ–±—ã. –°–æ–∑–¥–∞–≤–∞–π —Ä–∞–±–æ—á–µ–µ –º–µ—Å—Ç–æ –∏–ª–∏ –Ω–∞—Ö–æ–¥–∏ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –≤ –ª–æ–∫–∞—Ü–∏–∏, –∫–æ—Ç–æ—Ä—ã–µ —Ç–æ–∂–µ –∏—â—É—Ç –∫–æ–º–ø–∞–Ω–∏—é"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à —Ç–µ–∫—Å—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def init_db():
    conn = sqlite3.connect('hse_students.db')
    cursor = conn.cursor()
    
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS users (
            user_id INTEGER PRIMARY KEY,
            username TEXT,
            first_name TEXT,
            last_name TEXT,
            campus TEXT,
            education_level TEXT,
            course INTEGER,
            program_name TEXT,
            program_code TEXT,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )
    ''')
    
    # –¢–∞–±–ª–∏—Ü–∞ –¥–ª—è —Ä–∞–±–æ—á–∏—Ö –º–µ—Å—Ç
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS workplaces (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER,
            location TEXT,
            classroom TEXT,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            FOREIGN KEY (user_id) REFERENCES users (user_id)
        )
    ''')
    
    # –¢–∞–±–ª–∏—Ü–∞ –¥–ª—è –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS banned_users (
            user_id INTEGER PRIMARY KEY,
            banned_by TEXT,
            ban_reason TEXT,
            banned_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )
    ''')
    
    conn.commit()
    conn.close()

# –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
def is_admin(user):
    username = user.username
    if username:
        return username.lower() in [admin.lower() for admin in ADMINS]
    return False

# –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def is_user_banned(user_id):
    conn = sqlite3.connect('hse_students.db')
    cursor = conn.cursor()
    cursor.execute('SELECT COUNT(*) FROM banned_users WHERE user_id = ?', (user_id,))
    count = cursor.fetchone()[0]
    conn.close()
    return count > 0

# –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è user_id –ø–æ username
def get_user_id_by_username(username):
    # –£–±–∏—Ä–∞–µ–º @ –µ—Å–ª–∏ –µ—Å—Ç—å
    if username.startswith('@'):
        username = username[1:]
    
    conn = sqlite3.connect('hse_students.db')
    cursor = conn.cursor()
    cursor.execute('SELECT user_id FROM users WHERE username = ? OR username = ?', 
                   (username, '@' + username))
    result = cursor.fetchone()
    conn.close()
    return result[0] if result else None

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def get_campus_keyboard():
    keyboard = [
        [KeyboardButton("–ú–æ—Å–∫–≤–∞")],
        [KeyboardButton("–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥")],
        [KeyboardButton("–ù–∏–∂–Ω–∏–π –ù–æ–≤–≥–æ—Ä–æ–¥")],
        [KeyboardButton("–ü–µ—Ä–º—å")]
    ]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True)

def get_education_level_keyboard():
    keyboard = [
        [KeyboardButton("–ë–∞–∫–∞–ª–∞–≤—Ä–∏–∞—Ç")],
        [KeyboardButton("–ú–∞–≥–∏—Å—Ç—Ä–∞—Ç—É—Ä–∞")],
        [KeyboardButton("–ê—Å–ø–∏—Ä–∞–Ω—Ç—É—Ä–∞")],
        [KeyboardButton("–°–ø–µ—Ü–∏–∞–ª–∏—Ç–µ—Ç")]
    ]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True)

def get_course_keyboard():
    keyboard = [
        [KeyboardButton("1"), KeyboardButton("2")],
        [KeyboardButton("3"), KeyboardButton("4")],
        [KeyboardButton("5"), KeyboardButton("6")]
    ]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True)

def get_profile_menu_keyboard():
    keyboard = [
        [KeyboardButton("üë§ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–æ—Ñ–∏–ª—å")],
        [KeyboardButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å")],
        [KeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]
    ]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

def get_edit_menu_keyboard():
    keyboard = [
        [KeyboardButton("üìç –ò–∑–º–µ–Ω–∏—Ç—å –∫–∞–º–ø—É—Å"), KeyboardButton("üë§ –ò–∑–º–µ–Ω–∏—Ç—å –§–ò")],
        [KeyboardButton("üéì –ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç—É–ø–µ–Ω—å"), KeyboardButton("üìö –ò–∑–º–µ–Ω–∏—Ç—å –∫—É—Ä—Å")],
        [KeyboardButton("üìã –ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—É"), KeyboardButton("üîô –ù–∞–∑–∞–¥")]
    ]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

def get_building_keyboard():
    keyboard = [
        [KeyboardButton("–ú—è—Å–Ω–∏—Ü–∫–∞—è")],
        [KeyboardButton("–ü–æ–∫—Ä–æ–≤–∫–∞")],
        [KeyboardButton("–ë–∞—Å–º–∞–Ω–Ω–∞—è")],
        [KeyboardButton("–¢—Ä—ë—Ö—Å–≤—è—Ç")],
        [KeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å")]
    ]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True)

def get_experience_type_keyboard():
    keyboard = [
        [KeyboardButton("–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∫–æ–º—É-—Ç–æ")],
        [KeyboardButton("–°–æ–∑–¥–∞—Ç—å —Ä–∞–±–æ—á–µ–µ –º–µ—Å—Ç–æ, –≤–∏–¥–Ω–æ–µ –¥—Ä—É–≥–∏–º")],
        [KeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å")]
    ]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True)

def get_close_workplace_keyboard():
    keyboard = [
        [KeyboardButton("–ó–∞–∫—Ä—ã—Ç—å —Ä–∞–±–æ—á–µ–µ –º–µ—Å—Ç–æ")],
        [KeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]
    ]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

def get_workplace_location_keyboard():
    keyboard = [
        [KeyboardButton("–ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ 2 —ç—Ç–∞–∂ (—à—É–º–Ω–∞—è)")],
        [KeyboardButton("–ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ 3 —ç—Ç–∞–∂ (—Ç–∏—Ö–∞—è)")],
        [KeyboardButton("–ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ 4 —ç—Ç–∞–∂ (—Ç–∏—Ö–∞—è)")],
        [KeyboardButton("–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –∞—Ç—Ä–∏—É–º")],
        [KeyboardButton("–Æ–∂–Ω—ã–π –∞—Ç—Ä–∏—É–º")],
        [KeyboardButton("–ê—É–¥–∏—Ç–æ—Ä–∏—è")],
        [KeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ")]
    ]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True)

def get_search_location_keyboard():
    keyboard = [
        [KeyboardButton("–ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ 2 —ç—Ç–∞–∂ (—à—É–º–Ω–∞—è)")],
        [KeyboardButton("–ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ 3 —ç—Ç–∞–∂ (—Ç–∏—Ö–∞—è)")],
        [KeyboardButton("–ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ 4 —ç—Ç–∞–∂ (—Ç–∏—Ö–∞—è)")],
        [KeyboardButton("–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –∞—Ç—Ä–∏—É–º")],
        [KeyboardButton("–Æ–∂–Ω—ã–π –∞—Ç—Ä–∏—É–º")],
        [KeyboardButton("–ê—É–¥–∏—Ç–æ—Ä–∏–∏")],
        [KeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –ø–æ–∏—Å–∫")]
    ]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True)

def get_main_menu_keyboard():
    keyboard = [
        [KeyboardButton("üîç –ù–∞–π—Ç–∏ –∫–æ–º–ø–∞–Ω–∏—é –¥–ª—è —É—á—ë–±—ã")],
        [KeyboardButton("üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å")],
        [KeyboardButton("‚ÑπÔ∏è –ü–æ–º–æ—â—å")]
    ]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

def get_admin_menu_keyboard():
    keyboard = [
        [KeyboardButton("üö´ –ó–∞–±–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")],
        [KeyboardButton("‚úÖ –†–∞–∑–±–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")],
        [KeyboardButton("üìã –°–ø–∏—Å–æ–∫ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö")],
        [KeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]
    ]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

# –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞–ª–∏—á–∏—è –ø—Ä–æ—Ñ–∏–ª—è
def user_has_profile(user_id):
    conn = sqlite3.connect('hse_students.db')
    cursor = conn.cursor()
    cursor.execute('SELECT COUNT(*) FROM users WHERE user_id = ?', (user_id,))
    count = cursor.fetchone()[0]
    conn.close()
    return count > 0

# –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞–ª–∏—á–∏—è —Ä–∞–±–æ—á–µ–≥–æ –º–µ—Å—Ç–∞
def user_has_workplace(user_id):
    conn = sqlite3.connect('hse_students.db')
    cursor = conn.cursor()
    cursor.execute('SELECT COUNT(*) FROM workplaces WHERE user_id = ?', (user_id,))
    count = cursor.fetchone()[0]
    conn.close()
    return count > 0

# –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–Ω–∞
def check_ban(func):
    async def wrapper(update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_id = update.effective_user.id
        if is_user_banned(user_id):
            await update.message.reply_text("‚ùå –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –∏ –Ω–µ –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞.")
            return
        return await func(update, context)
    return wrapper

# –ë–∞–∑–æ–≤—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user = update.effective_user
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    if is_admin(user):
        message = f"{WELCOME_TEXT}\n\nüîß –£ –≤–∞—Å –µ—Å—Ç—å –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!\n\n–î–∞–≤–∞–π —Å–æ–∑–¥–∞–¥–∏–º —Ç–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å - –∏—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /create_profile\n\n–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–º–æ—â–∏ –∏—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /help\n\n–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å - /ban @username –ø—Ä–∏—á–∏–Ω–∞\n\n–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å - /unban @username\n\n–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π - /users\n\n–°–ø–∏—Å–æ–∫ —Ä–∞–±–æ—á–∏—Ö –º–µ—Å—Ç - /users_active\n\n–ó–∞–≤–µ—Ä—à–∏—Ç—å —Å–µ—Å—Å–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è - /end_session @username"
    else:
        message = f"{WELCOME_TEXT}\n\n–î–∞–≤–∞–π —Å–æ–∑–¥–∞–¥–∏–º —Ç–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å - –∏—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /create_profile\n\n–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–º–æ—â–∏ –∏—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /help"
    
    await update.message.reply_text(message, reply_markup=get_main_menu_keyboard())

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    await update.message.reply_text("–ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å: @work_man02")

# –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
async def admin_panel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å"""
    user = update.effective_user
    
    if not is_admin(user):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return
    
    await update.message.reply_text(
        "üîß –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_admin_menu_keyboard()
    )

async def ban_user(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ë–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user = update.effective_user
    
    if not is_admin(user):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return
    
    # –ï—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ —Å –∞—Ä–≥—É–º–µ–Ω—Ç–∞–º–∏
    if context.args:
        if len(context.args) < 2:
            await update.message.reply_text("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /ban @username –ø—Ä–∏—á–∏–Ω–∞")
            return
        
        target_username = context.args[0]
        reason = " ".join(context.args[1:])
        
        target_user_id = get_user_id_by_username(target_username)
        if not target_user_id:
            await update.message.reply_text(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_username} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—ã—Ç–∞–µ—Ç—Å—è –ª–∏ –∞–¥–º–∏–Ω –∑–∞–±–∞–Ω–∏—Ç—å –¥—Ä—É–≥–æ–≥–æ –∞–¥–º–∏–Ω–∞
        conn = sqlite3.connect('hse_students.db')
        cursor = conn.cursor()
        cursor.execute('SELECT username FROM users WHERE user_id = ?', (target_user_id,))
        result = cursor.fetchone()
        conn.close()
        
        if result and result[0]:
            target_username_clean = result[0].replace('@', '')
            if target_username_clean.lower() in [admin.lower() for admin in ADMINS]:
                await update.message.reply_text("‚ùå –ù–µ–ª—å–∑—è –∑–∞–±–∞–Ω–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
                return
        
        # –ë–∞–Ω–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        conn = sqlite3.connect('hse_students.db')
        cursor = conn.cursor()
        cursor.execute('''
            INSERT OR REPLACE INTO banned_users (user_id, banned_by, ban_reason)
            VALUES (?, ?, ?)
        ''', (target_user_id, f"@{user.username}", reason))
        conn.commit()
        conn.close()
        
        await update.message.reply_text(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_username} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.\n–ü—Ä–∏—á–∏–Ω–∞: {reason}")
    else:
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –±–∞–Ω–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: @username):")
        context.user_data['admin_action'] = 'ban_step1'

async def unban_user(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–†–∞–∑–±–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user = update.effective_user
    
    if not is_admin(user):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return
    
    if context.args:
        target_username = context.args[0]
        target_user_id = get_user_id_by_username(target_username)
        
        if not target_user_id:
            await update.message.reply_text(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_username} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
            return
        
        conn = sqlite3.connect('hse_students.db')
        cursor = conn.cursor()
        cursor.execute('DELETE FROM banned_users WHERE user_id = ?', (target_user_id,))
        changes = cursor.rowcount
        conn.commit()
        conn.close()
        
        if changes > 0:
            await update.message.reply_text(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_username} —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.")
        else:
            await update.message.reply_text(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_username} –Ω–µ –±—ã–ª –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.")
    else:
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ä–∞–∑–±–∞–Ω–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: @username):")
        context.user_data['admin_action'] = 'unban_step1'

async def end_session(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ó–∞–∫—Ä—ã—Ç–∏–µ —Ä–∞–±–æ—á–µ–≥–æ –º–µ—Å—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
    user = update.effective_user
    
    if not is_admin(user):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return
    
    if context.args:
        target_username = context.args[0]
        target_user_id = get_user_id_by_username(target_username)
        
        if not target_user_id:
            await update.message.reply_text(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_username} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∞–∫—Ç–∏–≤–Ω–æ–µ —Ä–∞–±–æ—á–µ–µ –º–µ—Å—Ç–æ
        conn = sqlite3.connect('hse_students.db')
        cursor = conn.cursor()
        cursor.execute('SELECT COUNT(*) FROM workplaces WHERE user_id = ?', (target_user_id,))
        workplace_count = cursor.fetchone()[0]
        
        if workplace_count == 0:
            await update.message.reply_text(f"‚ùå –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_username} –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ä–∞–±–æ—á–∏—Ö –º–µ—Å—Ç.")
            conn.close()
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–∞–±–æ—á–µ–º –º–µ—Å—Ç–µ –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º
        cursor.execute('SELECT location, classroom FROM workplaces WHERE user_id = ?', (target_user_id,))
        workplace_info = cursor.fetchone()
        
        # –£–¥–∞–ª—è–µ–º —Ä–∞–±–æ—á–µ–µ –º–µ—Å—Ç–æ
        cursor.execute('DELETE FROM workplaces WHERE user_id = ?', (target_user_id,))
        conn.commit()
        conn.close()
        
        workplace_location = workplace_info[0] if workplace_info else "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –ª–æ–∫–∞—Ü–∏—è"
        classroom = f" ({workplace_info[1]})" if workplace_info and workplace_info[1] else ""
        
        await update.message.reply_text(
            f"‚úÖ –†–∞–±–æ—á–µ–µ –º–µ—Å—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_username} –≤ –ª–æ–∫–∞—Ü–∏–∏ '{workplace_location}{classroom}' –±—ã–ª–æ –∑–∞–∫—Ä—ã—Ç–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º."
        )
        
        # –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (–µ—Å–ª–∏ –±–æ—Ç –º–æ–∂–µ—Ç –ø–∏—Å–∞—Ç—å –µ–º—É)
        try:
            await context.bot.send_message(
                chat_id=target_user_id,
                text=f"üîí –í–∞—à–µ —Ä–∞–±–æ—á–µ–µ –º–µ—Å—Ç–æ –≤ –ª–æ–∫–∞—Ü–∏–∏ '{workplace_location}{classroom}' –±—ã–ª–æ –∑–∞–∫—Ä—ã—Ç–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.\n\n–í—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–µ —Ä–∞–±–æ—á–µ–µ –º–µ—Å—Ç–æ –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è."
            )
        except Exception as e:
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–µ—Ç—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (–Ω–∞–ø—Ä–∏–º–µ—Ä, –æ–Ω –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞)
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_user_id}: {e}")
    else:
        await update.message.reply_text("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /end_session @username")

async def join_workplace(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ —Ä–∞–±–æ—á–µ–º—É –º–µ—Å—Ç—É"""
    user = update.effective_user
    user_id = user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–Ω
    if is_user_banned(user_id):
        await update.message.reply_text("‚ùå –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –∏ –Ω–µ –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞.")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø—Ä–æ—Ñ–∏–ª—å —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if not user_has_profile(user_id):
        await update.message.reply_text("‚ùå –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å –∫–æ–º–∞–Ω–¥–æ–π /create_profile")
        return
    
    if context.args:
        target_username = context.args[0]
        target_user_id = get_user_id_by_username(target_username)
        
        if not target_user_id:
            await update.message.reply_text(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_username} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
            return
        
        if target_user_id == user_id:
            await update.message.reply_text("‚ùå –ù–µ–ª—å–∑—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ —Å–∞–º–æ–º—É —Å–µ–±–µ.")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É —Ü–µ–ª–µ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∞–∫—Ç–∏–≤–Ω–æ–µ —Ä–∞–±–æ—á–µ–µ –º–µ—Å—Ç–æ
        conn = sqlite3.connect('hse_students.db')
        cursor = conn.cursor()
        cursor.execute('SELECT location, classroom FROM workplaces WHERE user_id = ?', (target_user_id,))
        workplace_info = cursor.fetchone()
        
        if not workplace_info:
            await update.message.reply_text(f"‚ùå –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_username} –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ä–∞–±–æ—á–µ–≥–æ –º–µ—Å—Ç–∞.")
            conn.close()
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ—Ñ–∏–ª–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
        cursor.execute('SELECT username, first_name, last_name, campus, education_level, course, program_name FROM users WHERE user_id = ?', (user_id,))
        sender_profile = cursor.fetchone()
        conn.close()
        
        if not sender_profile:
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤–∞—à–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è.")
            return
        
        workplace_location = workplace_info[0]
        classroom = f" ({workplace_info[1]})" if workplace_info[1] else ""
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–∞—Ä—Ç–æ—á–∫—É –ø—Ä–æ—Ñ–∏–ª—è –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
        sender_username, first_name, last_name, campus, education_level, course, program_name = sender_profile
        
        profile_card = f"""
üì© –ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ —Ä–∞–±–æ—á–µ–º—É –º–µ—Å—Ç—É!

üë§ –ö—Ç–æ —Ö–æ—á–µ—Ç –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è:
- –§–ò: {last_name} {first_name}
- Telegram: {sender_username or '–ù–µ —É–∫–∞–∑–∞–Ω'}
- –ö–∞–º–ø—É—Å: {campus}
- –°—Ç—É–ø–µ–Ω—å: {education_level}
- –ö—É—Ä—Å: {course}
- –ü—Ä–æ–≥—Ä–∞–º–º–∞: {program_name}

üìç –í–∞—à–µ —Ä–∞–±–æ—á–µ–µ –º–µ—Å—Ç–æ: {workplace_location}{classroom}

–ï—Å–ª–∏ —Å–æ–≥–ª–∞—Å–Ω—ã –ø—Ä–∏–Ω—è—Ç—å —ç—Ç–æ–≥–æ —Å—Ç—É–¥–µ–Ω—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∏–º –Ω–∞–ø—Ä—è–º—É—é!
        """
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤–ª–∞–¥–µ–ª—å—Ü—É —Ä–∞–±–æ—á–µ–≥–æ –º–µ—Å—Ç–∞
        try:
            await context.bot.send_message(
                chat_id=target_user_id,
                text=profile_card
            )
            
            # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—é
            await update.message.reply_text(
                f"‚úÖ –ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_username}!\n"
                f"–í–∞—à–∞ –∫–∞—Ä—Ç–æ—á–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è –±—ã–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤–ª–∞–¥–µ–ª—å—Ü—É —Ä–∞–±–æ—á–µ–≥–æ –º–µ—Å—Ç–∞ –≤ –ª–æ–∫–∞—Ü–∏–∏ '{workplace_location}{classroom}'."
            )
            
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_user_id}: {e}")
            await update.message.reply_text(
                f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_username}. "
                f"–í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞ –∏–ª–∏ —É–¥–∞–ª–∏–ª —á–∞—Ç."
            )
    else:
        await update.message.reply_text("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /join_workplace @username")

async def list_banned_users(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°–ø–∏—Å–æ–∫ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    user = update.effective_user
    
    if not is_admin(user):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return
    
    conn = sqlite3.connect('hse_students.db')
    cursor = conn.cursor()
    cursor.execute('''
        SELECT u.username, u.first_name, u.last_name, b.banned_by, b.ban_reason, b.banned_at
        FROM banned_users b
        LEFT JOIN users u ON b.user_id = u.user_id
        ORDER BY b.banned_at DESC
    ''')
    banned_users = cursor.fetchall()
    conn.close()
    
    if not banned_users:
        await update.message.reply_text("üìã –°–ø–∏—Å–æ–∫ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—É—Å—Ç.")
        return
    
    message = "üìã –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:\n\n"
    for i, (username, first_name, last_name, banned_by, reason, banned_at) in enumerate(banned_users, 1):
        user_display = f"{first_name} {last_name}" if first_name and last_name else username or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π"
        message += f"{i}. {user_display}\n"
        message += f"   üë§ {username or 'Username –Ω–µ —É–∫–∞–∑–∞–Ω'}\n"
        message += f"   üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω: {banned_by}\n"
        message += f"   üìù –ü—Ä–∏—á–∏–Ω–∞: {reason}\n"
        message += f"   üìÖ –î–∞—Ç–∞: {banned_at}\n\n"
    
    # –†–∞–∑–±–∏–≤–∞–µ–º –¥–ª–∏–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    if len(message) > 4000:
        parts = message.split('\n\n')
        current_message = "üìã –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:\n\n"
        
        for part in parts[1:]:
            if len(current_message + part + '\n\n') > 4000:
                await update.message.reply_text(current_message)
                current_message = part + '\n\n'
            else:
                current_message += part + '\n\n'
        
        if current_message.strip():
            await update.message.reply_text(current_message)
    else:
        await update.message.reply_text(message)

async def list_users(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    user = update.effective_user
    
    if not is_admin(user):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return
    
    conn = sqlite3.connect('hse_students.db')
    cursor = conn.cursor()
    cursor.execute('''
        SELECT user_id, username, first_name, last_name, created_at
        FROM users
        ORDER BY created_at DESC
    ''')
    users = cursor.fetchall()
    conn.close()
    
    if not users:
        await update.message.reply_text("üë• –í –±–æ—Ç–µ –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
        return
    
    message = f"üë• –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ ({len(users)} —á–µ–ª.):\n\n"
    for i, (user_id, username, first_name, last_name, created_at) in enumerate(users, 1):
        user_display = f"{last_name} {first_name}" if first_name and last_name else "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
        message += f"{i}. {user_id} - {user_display}\n"
        message += f"   üìû {username or 'Username –Ω–µ —É–∫–∞–∑–∞–Ω'}\n"
        message += f"   üìÖ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω: {created_at}\n\n"
    
    # –†–∞–∑–±–∏–≤–∞–µ–º –¥–ª–∏–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    if len(message) > 4000:
        parts = message.split('\n\n')
        current_message = f"üë• –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ ({len(users)} —á–µ–ª.):\n\n"
        
        for part in parts[1:]:
            if len(current_message + part + '\n\n') > 4000:
                await update.message.reply_text(current_message)
                current_message = part + '\n\n'
            else:
                current_message += part + '\n\n'
        
        if current_message.strip():
            await update.message.reply_text(current_message)
    else:
        await update.message.reply_text(message)

async def list_active_users(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∞–∫—Ç–∏–≤–Ω—ã–º–∏ —Ä–∞–±–æ—á–∏–º–∏ –º–µ—Å—Ç–∞–º–∏"""
    user = update.effective_user
    
    if not is_admin(user):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return
    
    conn = sqlite3.connect('hse_students.db')
    cursor = conn.cursor()
    cursor.execute('''
        SELECT u.user_id, u.username, u.first_name, u.last_name, w.location, w.classroom, w.created_at
        FROM users u
        JOIN workplaces w ON u.user_id = w.user_id
        ORDER BY w.created_at DESC
    ''')
    active_users = cursor.fetchall()
    conn.close()
    
    if not active_users:
        await update.message.reply_text("üè¢ –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∞–∫—Ç–∏–≤–Ω—ã–º–∏ —Ä–∞–±–æ—á–∏–º–∏ –º–µ—Å—Ç–∞–º–∏.")
        return
    
    message = f"üè¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å –∞–∫—Ç–∏–≤–Ω—ã–º–∏ —Ä–∞–±–æ—á–∏–º–∏ –º–µ—Å—Ç–∞–º–∏ ({len(active_users)} —á–µ–ª.):\n\n"
    for i, (user_id, username, first_name, last_name, location, classroom, created_at) in enumerate(active_users, 1):
        user_display = f"{last_name} {first_name}" if first_name and last_name else "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
        workplace = f"{location}" + (f" ({classroom})" if classroom else "")
        message += f"{i}. {user_id} - {user_display} - {workplace}\n"
        message += f"   üìû {username or 'Username –Ω–µ —É–∫–∞–∑–∞–Ω'}\n"
        message += f"   üïê –°–æ–∑–¥–∞–Ω–æ: {created_at}\n\n"
    
    # –†–∞–∑–±–∏–≤–∞–µ–º –¥–ª–∏–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    if len(message) > 4000:
        parts = message.split('\n\n')
        current_message = f"üè¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å –∞–∫—Ç–∏–≤–Ω—ã–º–∏ —Ä–∞–±–æ—á–∏–º–∏ –º–µ—Å—Ç–∞–º–∏ ({len(active_users)} —á–µ–ª.):\n\n"
        
        for part in parts[1:]:
            if len(current_message + part + '\n\n') > 4000:
                await update.message.reply_text(current_message)
                current_message = part + '\n\n'
            else:
                current_message += part + '\n\n'
        
        if current_message.strip():
            await update.message.reply_text(current_message)
    else:
        await update.message.reply_text(message)

@check_ban
async def create_profile(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞—á–∞–ª–æ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è"""
    user_id = update.effective_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –ø—Ä–æ—Ñ–∏–ª—å —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if user_has_profile(user_id):
        await update.message.reply_text(
            "–£ —Ç–µ–±—è —É–∂–µ –µ—Å—Ç—å –ø—Ä–æ—Ñ–∏–ª—å! –û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π –µ–≥–æ",
            reply_markup=get_profile_menu_keyboard()
        )
        return
    
    await update.message.reply_text(
        "–î–∞–≤–∞–π—Ç–µ —Å–æ–∑–¥–∞–¥–∏–º –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å!\n\nüìç –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–º–ø—É—Å (—Å–ø–∏—Å–æ–∫ –±—É–¥–µ—Ç –ø–æ–ø–æ–ª–Ω—è—Ç—å—Å—è):",
        reply_markup=get_campus_keyboard()
    )
    context.user_data['step'] = 'campus'

@check_ban
async def handle_profile_creation(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è –ø–æ —à–∞–≥–∞–º"""
    user_data = context.user_data
    user_id = update.effective_user.id
    
    if user_data.get('step') == 'campus':
        user_data['campus'] = update.message.text
        await update.message.reply_text(
            "üë§ –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–∏ –§–∞–º–∏–ª–∏—é –∏ –ò–º—è (–Ω–∞–ø—Ä–∏–º–µ—Ä: –ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω):"
        )
        user_data['step'] = 'fullname'
        
    elif user_data.get('step') == 'fullname':
        fullname = update.message.text.strip()
        if ' ' in fullname:
            parts = fullname.split(' ', 1)
            user_data['last_name'] = parts[0]
            user_data['first_name'] = parts[1]
            await update.message.reply_text(
                "üéì –í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—É–ø–µ–Ω—å –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è:",
                reply_markup=get_education_level_keyboard()
            )
            user_data['step'] = 'education_level'
        else:
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –§–∞–º–∏–ª–∏—é –∏ –ò–º—è —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª.")
            
    elif user_data.get('step') == 'education_level':
        user_data['education_level'] = update.message.text
        await update.message.reply_text(
            "üìö –í—ã–±–µ—Ä–∏—Ç–µ –∫—É—Ä—Å:",
            reply_markup=get_course_keyboard()
        )
        user_data['step'] = 'course'
        
    elif user_data.get('step') == 'course':
        try:
            course = int(update.message.text)
            if 1 <= course <= 6:
                user_data['course'] = course
                await update.message.reply_text(
                    "üìã –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã:\n\n"
                    "–ù–∞–ø—Ä–∏–º–µ—Ä: –≠–∫–æ–Ω–æ–º–∏–∫–∞, –ü—Ä–∏–∫–ª–∞–¥–Ω–∞—è –º–∞—Ç–µ–º–∞—Ç–∏–∫–∞ –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞, –Æ—Ä–∏—Å–ø—Ä—É–¥–µ–Ω—Ü–∏—è"
                )
                user_data['step'] = 'program_name'
            else:
                await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫—É—Ä—Å –æ—Ç 1 –¥–æ 6.")
        except ValueError:
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫—É—Ä—Å–∞ (1-6).")
            
    elif user_data.get('step') == 'program_name':
        user_data['program_name'] = update.message.text.strip()
        await update.message.reply_text(
            "üî¢ –í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã:\n\n"
            "–ö–æ–¥ –º–æ–∂–Ω–æ –Ω–∞–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç–µ –í–®–≠: https://clck.ru/3PKQuC\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: 38.03.01"
        )
        user_data['step'] = 'program_code'
            
    elif user_data.get('step') == 'program_code':
        user_data['program_code'] = update.message.text.strip()
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        conn = sqlite3.connect('hse_students.db')
        cursor = conn.cursor()
        
        # –ü–æ–ª—É—á–∞–µ–º username —Å @ –∏–ª–∏ –±–µ–∑ –Ω–µ–≥–æ
        username = update.effective_user.username
        if username and not username.startswith('@'):
            username = '@' + username
        
        cursor.execute('''
            INSERT OR REPLACE INTO users 
            (user_id, username, first_name, last_name, campus, education_level, course, program_name, program_code)
            VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)
        ''', (
            user_id,
            username,
            user_data['first_name'],
            user_data['last_name'],
            user_data['campus'],
            user_data['education_level'],
            user_data['course'],
            user_data['program_name'],
            user_data['program_code']
        ))
        
        conn.commit()
        conn.close()
        
        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è
        profile_info = f"""
‚úÖ –ü—Ä–æ—Ñ–∏–ª—å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!

üë§ –§–ò: {user_data['last_name']} {user_data['first_name']}
üìû Telegram: {username if username else '–ù–µ —É–∫–∞–∑–∞–Ω'}
üìç –ö–∞–º–ø—É—Å: {user_data['campus']}
üéì –°—Ç—É–ø–µ–Ω—å: {user_data['education_level']}
üìö –ö—É—Ä—Å: {user_data['course']}
üìã –ü—Ä–æ–≥—Ä–∞–º–º–∞: {user_data['program_name']}
üî¢ –ö–æ–¥ –ø—Ä–æ–≥—Ä–∞–º–º—ã: {user_data['program_code']}

–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å —Ç–µ–ø–µ—Ä—å –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –≤–∞—à–µ–º—É Telegram ID –∏ –±—É–¥–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω!
        """
        
        await update.message.reply_text(profile_info)
        
        # –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏–π —Å –ø—Ä–æ—Ñ–∏–ª–µ–º
        await update.message.reply_text(
            "–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ?",
            reply_markup=get_main_menu_keyboard()
        )
        
        # –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Å–µ—Å—Å–∏–∏
        context.user_data.clear()

@check_ban
async def view_profile(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = update.effective_user.id
    
    conn = sqlite3.connect('hse_students.db')
    cursor = conn.cursor()
    cursor.execute('SELECT * FROM users WHERE user_id = ?', (user_id,))
    profile = cursor.fetchone()
    conn.close()
    
    if profile:
        message = f"""
üë§ –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:

–§–ò: {profile[3]} {profile[2]}
üìû Telegram: {profile[1] if profile[1] else '–ù–µ —É–∫–∞–∑–∞–Ω'}
üìç –ö–∞–º–ø—É—Å: {profile[4]}
üéì –°—Ç—É–ø–µ–Ω—å: {profile[5]}
üìö –ö—É—Ä—Å: {profile[6]}
üìã –ü—Ä–æ–≥—Ä–∞–º–º–∞: {profile[7]}
üî¢ –ö–æ–¥ –ø—Ä–æ–≥—Ä–∞–º–º—ã: {profile[8]}
        """
        await update.message.reply_text(message, reply_markup=get_profile_menu_keyboard())
    else:
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–æ—Ñ–∏–ª—è. –°–æ–∑–¥–∞–π—Ç–µ –µ–≥–æ –∫–æ–º–∞–Ω–¥–æ–π /create_profile")

@check_ban
async def edit_profile_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ú–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è"""
    await update.message.reply_text(
        "–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –≤ –ø—Ä–æ—Ñ–∏–ª–µ?",
        reply_markup=get_edit_menu_keyboard()
    )

@check_ban
async def find_study_buddy(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞—á–∞–ª–æ –ø–æ–∏—Å–∫–∞ –∫–æ–º–ø–∞–Ω–∏–∏ –¥–ª—è —É—á—ë–±—ã"""
    await update.message.reply_text(
        "üè¢ –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ—Ä–ø—É—Å –¥–ª—è –ø–æ–∏—Å–∫–∞ –∫–æ–º–ø–∞–Ω–∏–∏:",
        reply_markup=get_building_keyboard()
    )
    context.user_data['search_step'] = 'building'

@check_ban
async def close_workplace(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ó–∞–∫—Ä—ã—Ç–∏–µ —Ä–∞–±–æ—á–µ–≥–æ –º–µ—Å—Ç–∞"""
    user_id = update.effective_user.id
    
    conn = sqlite3.connect('hse_students.db')
    cursor = conn.cursor()
    cursor.execute('DELETE FROM workplaces WHERE user_id = ?', (user_id,))
    conn.commit()
    conn.close()
    
    await update.message.reply_text(
        "‚úÖ –†–∞–±–æ—á–µ–µ –º–µ—Å—Ç–æ –∑–∞–∫—Ä—ã—Ç–æ!",
        reply_markup=get_main_menu_keyboard()
    )

async def show_workplace_users(update: Update, context: ContextTypes.DEFAULT_TYPE, location: str):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —Ä–∞–±–æ—á–∏–º–∏ –º–µ—Å—Ç–∞–º–∏ –≤ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–π –ª–æ–∫–∞—Ü–∏–∏"""
    conn = sqlite3.connect('hse_students.db')
    cursor = conn.cursor()
    
    if location == "–ê—É–¥–∏—Ç–æ—Ä–∏–∏":
        # –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –∞—É–¥–∏—Ç–æ—Ä–∏—è—Ö
        cursor.execute('''
            SELECT u.first_name, u.last_name, u.username, u.education_level, u.course, u.program_name, w.classroom
            FROM users u 
            JOIN workplaces w ON u.user_id = w.user_id 
            WHERE w.location = "–ê—É–¥–∏—Ç–æ—Ä–∏—è"
        ''')
    else:
        # –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –ª–æ–∫–∞—Ü–∏–∏
        cursor.execute('''
            SELECT u.first_name, u.last_name, u.username, u.education_level, u.course, u.program_name
            FROM users u 
            JOIN workplaces w ON u.user_id = w.user_id 
            WHERE w.location = ?
        ''', (location,))
    
    users = cursor.fetchall()
    conn.close()
    
    if not users:
        await update.message.reply_text(
            f"–í –ª–æ–∫–∞—Ü–∏–∏ '{location}' –ø–æ–∫–∞ –Ω–∏–∫—Ç–æ –Ω–µ —Å–æ–∑–¥–∞–ª —Ä–∞–±–æ—á–µ–µ –º–µ—Å—Ç–æ.",
            reply_markup=get_main_menu_keyboard()
        )
        return
    
    message = f"–ß—Ç–æ–±—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è, –Ω–∞–ø–∏—à–∏ –∫–æ–º–∞–Ω–¥—É /join_workplace @username\n\nüë• –°—Ç—É–¥–µ–Ω—Ç—ã –≤ –ª–æ–∫–∞—Ü–∏–∏ '{location}':\n\n"
    
    for i, user in enumerate(users, 1):
        if location == "–ê—É–¥–∏—Ç–æ—Ä–∏–∏":
            # –î–ª—è –∞—É–¥–∏—Ç–æ—Ä–∏–π –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–æ–º–µ—Ä –∞—É–¥–∏—Ç–æ—Ä–∏–∏
            message += f"{i}. {user[1]} {user[0]}\n"
            message += f"üìû {user[2] if user[2] else '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
            message += f"üéì {user[3]}, {user[4]} –∫—É—Ä—Å\n"
            message += f"üìã {user[5]}\n"
            message += f"üö™ –ê—É–¥–∏—Ç–æ—Ä–∏—è: {user[6]}\n\n"
        else:
            message += f"{i}. {user[1]} {user[0]}\n"
            message += f"üìû {user[2] if user[2] else '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
            message += f"üéì {user[3]}, {user[4]} –∫—É—Ä—Å\n"
            message += f"üìã {user[5]}\n\n"
    
    # Telegram –∏–º–µ–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –Ω–∞ –¥–ª–∏–Ω—É —Å–æ–æ–±—â–µ–Ω–∏—è
    if len(message) > 4000:
        # –†–∞–∑–±–∏–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —á–∞—Å—Ç–∏
        parts = message.split('\n\n')
        current_message = f"–ß—Ç–æ–±—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è, –Ω–∞–ø–∏—à–∏ –∫–æ–º–∞–Ω–¥—É /join_workplace @username\n\nüë• –°—Ç—É–¥–µ–Ω—Ç—ã –≤ –ª–æ–∫–∞—Ü–∏–∏ '{location}':\n\n"
        
        for part in parts[1:]:  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
            if len(current_message + part + '\n\n') > 4000:
                await update.message.reply_text(current_message)
                current_message = part + '\n\n'
            else:
                current_message += part + '\n\n'
        
        if current_message.strip():
            await update.message.reply_text(current_message, reply_markup=get_main_menu_keyboard())
    else:
        await update.message.reply_text(message, reply_markup=get_main_menu_keyboard())

async def save_workplace(update: Update, context: ContextTypes.DEFAULT_TYPE, location: str, classroom: str = None):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–∞–±–æ—á–µ–≥–æ –º–µ—Å—Ç–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
    user_id = update.effective_user.id
    
    conn = sqlite3.connect('hse_students.db')
    cursor = conn.cursor()
    
    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —Ä–∞–±–æ—á–∏–µ –º–µ—Å—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    cursor.execute('DELETE FROM workplaces WHERE user_id = ?', (user_id,))
    
    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Ä–∞–±–æ—á–µ–µ –º–µ—Å—Ç–æ
    cursor.execute('''
        INSERT INTO workplaces (user_id, location, classroom)
        VALUES (?, ?, ?)
    ''', (user_id, location, classroom))
    
    conn.commit()
    conn.close()
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π –∑–∞–∫—Ä—ã—Ç–∏—è
    await update.message.reply_text(
        "–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –¥—Ä—É–≥–∏–µ —Å—Ç—É–¥–µ–Ω—Ç—ã –º–æ–≥—É—Ç –∫ —Ç–µ–±–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è. –ñ–¥–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –Ω–∏—Ö –≤ —Ç–µ–ª–µ–≥—Ä–∞–º–º –∏ –Ω–µ –∑–∞–±—É–¥—å —Ä–∞–∑—Ä–µ—à–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –Ω–µ–∑–Ω–∞–∫–æ–º—ã—Ö –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤!\n\nüí° –ó–∞–∫—Ä–æ–π —Ä–∞–±–æ—á–µ–µ –º–µ—Å—Ç–æ, –µ—Å–ª–∏ —É–∂–µ –Ω–∞—à–µ–ª —Å–µ–±–µ –∫–æ–º–ø–∞–Ω–∏—é",
        reply_markup=get_close_workplace_keyboard()
    )
    
    # –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø–æ–∏—Å–∫–∞
    context.user_data.pop('search_step', None)
    context.user_data.pop('temp_building', None)
    context.user_data.pop('temp_experience_type', None)
    context.user_data.pop('temp_location', None)

async def cancel_workplace_creation(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–º–µ–Ω–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–∞–±–æ—á–µ–≥–æ –º–µ—Å—Ç–∞"""
    # –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø–æ–∏—Å–∫–∞ –∏ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–∞–±–æ—á–µ–≥–æ –º–µ—Å—Ç–∞
    context.user_data.pop('search_step', None)
    context.user_data.pop('temp_building', None)
    context.user_data.pop('temp_experience_type', None)
    context.user_data.pop('temp_location', None)
    
    await update.message.reply_text(
        "‚ùå –°–æ–∑–¥–∞–Ω–∏–µ —Ä–∞–±–æ—á–µ–≥–æ –º–µ—Å—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
        reply_markup=get_main_menu_keyboard()
    )

async def cancel_search(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–º–µ–Ω–∞ –ø–æ–∏—Å–∫–∞ –∫–æ–º–ø–∞–Ω–∏–∏"""
    # –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø–æ–∏—Å–∫–∞
    context.user_data.pop('search_step', None)
    context.user_data.pop('temp_building', None)
    context.user_data.pop('temp_experience_type', None)
    context.user_data.pop('temp_location', None)
    
    await update.message.reply_text(
        "‚ùå –ü–æ–∏—Å–∫ –∫–æ–º–ø–∞–Ω–∏–∏ –æ—Ç–º–µ–Ω–µ–Ω.",
        reply_markup=get_main_menu_keyboard()
    )

@check_ban
async def handle_study_buddy_search(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∏—Å–∫–∞ –∫–æ–º–ø–∞–Ω–∏–∏ –¥–ª—è —É—á—ë–±—ã"""
    search_step = context.user_data.get('search_step')
    text = update.message.text
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ—Ç–º–µ–Ω—É –Ω–∞ –ª—é–±–æ–º —ç—Ç–∞–ø–µ
    if text in ["‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ", "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –ø–æ–∏—Å–∫"]:
        if text == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –ø–æ–∏—Å–∫":
            await cancel_search(update, context)
        else:
            await cancel_workplace_creation(update, context)
        return
    
    if search_step == 'building':
        building = text
        if building != "–ü–æ–∫—Ä–æ–≤–∫–∞":
            await update.message.reply_text(
                "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –±–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–æ–∫—Ä–æ–≤–∫–∏. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∏—Å–∫–∞—Ç—å –∫–æ–º–ø–∞–Ω–∏—é —Ç–∞–º!",
                reply_markup=get_building_keyboard()
            )
            return
        
        context.user_data['temp_building'] = building
        await update.message.reply_text(
            "–¢—ã —Ö–æ—á–µ—à—å...",
            reply_markup=get_experience_type_keyboard()
        )
        context.user_data['search_step'] = 'experience_type'
        
    elif search_step == 'experience_type':
        experience_type = text
        context.user_data['temp_experience_type'] = experience_type
        
        if experience_type == "–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∫–æ–º—É-—Ç–æ":
            await update.message.reply_text(
                "üîç –í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—Ç–æ –¥–ª—è –ø–æ–∏—Å–∫–∞:",
                reply_markup=get_search_location_keyboard()
            )
            context.user_data['search_step'] = 'search_location'
        else:  # "–°–æ–∑–¥–∞—Ç—å —Ä–∞–±–æ—á–µ–µ –º–µ—Å—Ç–æ, –≤–∏–¥–Ω–æ–µ –¥—Ä—É–≥–∏–º"
            user_id = update.effective_user.id
            if user_has_workplace(user_id):
                await update.message.reply_text(
                    "–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–æ–µ —Ä–∞–±–æ—á–µ–µ –º–µ—Å—Ç–æ!",
                    reply_markup=get_close_workplace_keyboard()
                )
                # –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø–æ–∏—Å–∫–∞
                context.user_data.pop('search_step', None)
                context.user_data.pop('temp_building', None)
                context.user_data.pop('temp_experience_type', None)
            else:
                await update.message.reply_text(
                    "üìç –í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—Ç–æ –¥–ª—è —É—á—ë–±—ã:",
                    reply_markup=get_workplace_location_keyboard()
                )
                context.user_data['search_step'] = 'workplace_location'
    
    elif search_step == 'search_location':
        location = text
        await show_workplace_users(update, context, location)
        
        # –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø–æ–∏—Å–∫–∞
        context.user_data.pop('search_step', None)
        context.user_data.pop('temp_building', None)
        context.user_data.pop('temp_experience_type', None)
    
    elif search_step == 'workplace_location':
        location = text
        context.user_data['temp_location'] = location
        
        if location == "–ê—É–¥–∏—Ç–æ—Ä–∏—è":
            await update.message.reply_text(
                "–Ω–∞–ø–∏—à–∏ –Ω–æ–º–µ—Ä –∞—É–¥–∏—Ç–æ—Ä–∏–∏ –≤–º–µ—Å—Ç–µ —Å –±—É–∫–≤–æ–π, –Ω–∞–ø—Ä–∏–º–µ—Ä, G603\n\n‚ùå –î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–ø–∏—à–∏—Ç–µ '–æ—Ç–º–µ–Ω–∞'"
            )
            context.user_data['search_step'] = 'classroom_number'
        else:
            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–∞–±–æ—á–µ–≥–æ –º–µ—Å—Ç–∞ –≤ –ë–î
            await save_workplace(update, context, location, None)
    
    elif search_step == 'classroom_number':
        classroom = text.strip()
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ—Ç–º–µ–Ω—É
        if classroom.lower() in ['–æ—Ç–º–µ–Ω–∞', '–æ—Ç–º–µ–Ω–∏—Ç—å', '‚ùå –æ—Ç–º–µ–Ω–∞', '‚ùå']:
            await cancel_workplace_creation(update, context)
            return
            
        location = context.user_data.get('temp_location', '–ê—É–¥–∏—Ç–æ—Ä–∏—è')
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–∞–±–æ—á–µ–≥–æ –º–µ—Å—Ç–∞ –≤ –ë–î
        await save_workplace(update, context, location, classroom)

async def handle_menu_actions(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π –∏–∑ –º–µ–Ω—é"""
    text = update.message.text
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ—Ç–º–µ–Ω—É –Ω–∞ –ª—é–±–æ–º —ç—Ç–∞–ø–µ
    if text in ["‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ", "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –ø–æ–∏—Å–∫"]:
        if text == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –ø–æ–∏—Å–∫":
            await cancel_search(update, context)
        else:
            await cancel_workplace_creation(update, context)
        return
    
    if text == "üîç –ù–∞–π—Ç–∏ –∫–æ–º–ø–∞–Ω–∏—é –¥–ª—è —É—á—ë–±—ã":
        await find_study_buddy(update, context)
    elif text == "üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å":
        await view_profile(update, context)
    elif text == "‚ÑπÔ∏è –ü–æ–º–æ—â—å":
        await help_command(update, context)
    elif text == "üë§ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–æ—Ñ–∏–ª—å":
        await view_profile(update, context)
    elif text == "‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å":
        await edit_profile_menu(update, context)
    elif text == "üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é" or text == "üîô –ù–∞–∑–∞–¥":
        await update.message.reply_text(
            "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
            reply_markup=get_main_menu_keyboard()
        )
    elif text == "–ó–∞–∫—Ä—ã—Ç—å —Ä–∞–±–æ—á–µ–µ –º–µ—Å—Ç–æ":
        await close_workplace(update, context)
    elif text == "üìç –ò–∑–º–µ–Ω–∏—Ç—å –∫–∞–º–ø—É—Å":
        await update.message.reply_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π –∫–∞–º–ø—É—Å:",
            reply_markup=get_campus_keyboard()
        )
        context.user_data['edit_step'] = 'campus'
    elif text == "üë§ –ò–∑–º–µ–Ω–∏—Ç—å –§–ò":
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–µ –§–∞–º–∏–ª–∏—é –∏ –ò–º—è (—á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª):")
        context.user_data['edit_step'] = 'fullname'
    elif text == "üéì –ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç—É–ø–µ–Ω—å":
        await update.message.reply_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—É—é —Å—Ç—É–ø–µ–Ω—å –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è:",
            reply_markup=get_education_level_keyboard()
        )
        context.user_data['edit_step'] = 'education_level'
    elif text == "üìö –ò–∑–º–µ–Ω–∏—Ç—å –∫—É—Ä—Å":
        await update.message.reply_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π –∫—É—Ä—Å:",
            reply_markup=get_course_keyboard()
        )
        context.user_data['edit_step'] = 'course'
    elif text == "üìã –ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—É":
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã:")
        context.user_data['edit_step'] = 'program_name'
    # –ê–¥–º–∏–Ω—Å–∫–∏–µ –¥–µ–π—Å—Ç–≤–∏—è
    elif text == "üö´ –ó–∞–±–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è":
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –±–∞–Ω–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: @username):")
        context.user_data['admin_action'] = 'ban_step1'
    elif text == "‚úÖ –†–∞–∑–±–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è":
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ä–∞–∑–±–∞–Ω–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: @username):")
        context.user_data['admin_action'] = 'unban_step1'
    elif text == "üìã –°–ø–∏—Å–æ–∫ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö":
        await list_banned_users(update, context)

async def handle_profile_editing(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è"""
    edit_step = context.user_data.get('edit_step')
    user_id = update.effective_user.id
    
    if edit_step == 'campus':
        new_value = update.message.text
        field = 'campus'
    elif edit_step == 'fullname':
        fullname = update.message.text.strip()
        if ' ' in fullname:
            parts = fullname.split(' ', 1)
            # –û–±–Ω–æ–≤–ª—è–µ–º –¥–≤–∞ –ø–æ–ª—è –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ
            conn = sqlite3.connect('hse_students.db')
            cursor = conn.cursor()
            cursor.execute(
                'UPDATE users SET last_name = ?, first_name = ? WHERE user_id = ?',
                (parts[0], parts[1], user_id)
            )
            conn.commit()
            conn.close()
            await update.message.reply_text(
                f"‚úÖ –§–ò –æ–±–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞: {parts[0]} {parts[1]}",
                reply_markup=get_profile_menu_keyboard()
            )
            context.user_data.clear()
            return
        else:
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –§–∞–º–∏–ª–∏—é –∏ –ò–º—è —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª.")
            return
    elif edit_step == 'education_level':
        new_value = update.message.text
        field = 'education_level'
    elif edit_step == 'course':
        try:
            new_value = int(update.message.text)
            if not (1 <= new_value <= 6):
                await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫—É—Ä—Å –æ—Ç 1 –¥–æ 6.")
                return
            field = 'course'
        except ValueError:
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫—É—Ä—Å–∞ (1-6).")
            return
    elif edit_step == 'program_name':
        context.user_data['new_program_name'] = update.message.text.strip()
        await update.message.reply_text("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –ø—Ä–æ–≥—Ä–∞–º–º—ã:")
        context.user_data['edit_step'] = 'program_code'
        return
    elif edit_step == 'program_code':
        # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ –∫–æ–¥ –ø—Ä–æ–≥—Ä–∞–º–º—ã
        conn = sqlite3.connect('hse_students.db')
        cursor = conn.cursor()
        cursor.execute(
            'UPDATE users SET program_name = ?, program_code = ? WHERE user_id = ?',
            (context.user_data['new_program_name'], update.message.text.strip(), user_id)
        )
        conn.commit()
        conn.close()
        await update.message.reply_text(
            f"‚úÖ –ü—Ä–æ–≥—Ä–∞–º–º–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞: {context.user_data['new_program_name']} ({update.message.text.strip()})",
            reply_markup=get_profile_menu_keyboard()
        )
        context.user_data.clear()
        return
    else:
        return
    
    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ–¥–Ω–æ–≥–æ –ø–æ–ª—è
    conn = sqlite3.connect('hse_students.db')
    cursor = conn.cursor()
    cursor.execute(f'UPDATE users SET {field} = ? WHERE user_id = ?', (new_value, user_id))
    conn.commit()
    conn.close()
    
    await update.message.reply_text(
        f"‚úÖ {field.replace('_', ' ').title()} –æ–±–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞: {new_value}",
        reply_markup=get_profile_menu_keyboard()
    )
    context.user_data.clear()

async def handle_admin_actions(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–¥–º–∏–Ω—Å–∫–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π"""
    admin_action = context.user_data.get('admin_action')
    user = update.effective_user
    
    if not is_admin(user):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return
    
    if admin_action == 'ban_step1':
        target_username = update.message.text.strip()
        context.user_data['ban_target'] = target_username
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –±–∞–Ω–∞:")
        context.user_data['admin_action'] = 'ban_step2'
        
    elif admin_action == 'ban_step2':
        reason = update.message.text.strip()
        target_username = context.user_data.get('ban_target')
        
        target_user_id = get_user_id_by_username(target_username)
        if not target_user_id:
            await update.message.reply_text(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_username} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
            context.user_data.clear()
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—ã—Ç–∞–µ—Ç—Å—è –ª–∏ –∞–¥–º–∏–Ω –∑–∞–±–∞–Ω–∏—Ç—å –¥—Ä—É–≥–æ–≥–æ –∞–¥–º–∏–Ω–∞
        conn = sqlite3.connect('hse_students.db')
        cursor = conn.cursor()
        cursor.execute('SELECT username FROM users WHERE user_id = ?', (target_user_id,))
        result = cursor.fetchone()
        conn.close()
        
        if result and result[0]:
            target_username_clean = result[0].replace('@', '')
            if target_username_clean.lower() in [admin.lower() for admin in ADMINS]:
                await update.message.reply_text("‚ùå –ù–µ–ª—å–∑—è –∑–∞–±–∞–Ω–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
                context.user_data.clear()
                return
        
        # –ë–∞–Ω–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        conn = sqlite3.connect('hse_students.db')
        cursor = conn.cursor()
        cursor.execute('''
            INSERT OR REPLACE INTO banned_users (user_id, banned_by, ban_reason)
            VALUES (?, ?, ?)
        ''', (target_user_id, f"@{user.username}", reason))
        conn.commit()
        conn.close()
        
        await update.message.reply_text(
            f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_username} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.\n–ü—Ä–∏—á–∏–Ω–∞: {reason}",
            reply_markup=get_admin_menu_keyboard()
        )
        context.user_data.clear()
        
    elif admin_action == 'unban_step1':
        target_username = update.message.text.strip()
        target_user_id = get_user_id_by_username(target_username)
        
        if not target_user_id:
            await update.message.reply_text(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_username} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
            context.user_data.clear()
            return
        
        conn = sqlite3.connect('hse_students.db')
        cursor = conn.cursor()
        cursor.execute('DELETE FROM banned_users WHERE user_id = ?', (target_user_id,))
        changes = cursor.rowcount
        conn.commit()
        conn.close()
        
        if changes > 0:
            await update.message.reply_text(
                f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_username} —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.",
                reply_markup=get_admin_menu_keyboard()
            )
        else:
            await update.message.reply_text(
                f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_username} –Ω–µ –±—ã–ª –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.",
                reply_markup=get_admin_menu_keyboard()
            )
        context.user_data.clear()

async def echo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    if context.user_data.get('step'):
        await handle_profile_creation(update, context)
    elif context.user_data.get('edit_step'):
        await handle_profile_editing(update, context)
    elif context.user_data.get('search_step'):
        await handle_study_buddy_search(update, context)
    elif context.user_data.get('admin_action'):
        await handle_admin_actions(update, context)
    elif update.message.text in ["üîç –ù–∞–π—Ç–∏ –∫–æ–º–ø–∞–Ω–∏—é –¥–ª—è —É—á—ë–±—ã", "üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å", "‚ÑπÔ∏è –ü–æ–º–æ—â—å",
                                  "üë§ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–æ—Ñ–∏–ª—å", "‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å", "üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "üîô –ù–∞–∑–∞–¥", 
                                  "üìç –ò–∑–º–µ–Ω–∏—Ç—å –∫–∞–º–ø—É—Å", "üë§ –ò–∑–º–µ–Ω–∏—Ç—å –§–ò", "üéì –ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç—É–ø–µ–Ω—å", "üìö –ò–∑–º–µ–Ω–∏—Ç—å –∫—É—Ä—Å", "üìã –ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—É",
                                  "–ú—è—Å–Ω–∏—Ü–∫–∞—è", "–ü–æ–∫—Ä–æ–≤–∫–∞", "–ë–∞—Å–º–∞–Ω–Ω–∞—è", "–¢—Ä—ë—Ö—Å–≤—è—Ç",
                                  "–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∫–æ–º—É-—Ç–æ", "–°–æ–∑–¥–∞—Ç—å —Ä–∞–±–æ—á–µ–µ –º–µ—Å—Ç–æ, –≤–∏–¥–Ω–æ–µ –¥—Ä—É–≥–∏–º",
                                  "–ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ 2 —ç—Ç–∞–∂ (—à—É–º–Ω–∞—è)", "–ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ 3 —ç—Ç–∞–∂ (—Ç–∏—Ö–∞—è)", "–ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ 4 —ç—Ç–∞–∂ (—Ç–∏—Ö–∞—è)",
                                  "–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –∞—Ç—Ä–∏—É–º", "–Æ–∂–Ω—ã–π –∞—Ç—Ä–∏—É–º", "–ê—É–¥–∏—Ç–æ—Ä–∏—è", "–ê—É–¥–∏—Ç–æ—Ä–∏–∏",
                                  "–ó–∞–∫—Ä—ã—Ç—å —Ä–∞–±–æ—á–µ–µ –º–µ—Å—Ç–æ", "üö´ –ó–∞–±–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", "‚úÖ –†–∞–∑–±–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", "üìã –°–ø–∏—Å–æ–∫ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö",
                                  "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ", "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –ø–æ–∏—Å–∫"]:
        await handle_menu_actions(update, context)
    else:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–Ω –ø–µ—Ä–µ–¥ –æ—Ç–≤–µ—Ç–æ–º
        user_id = update.effective_user.id
        if is_user_banned(user_id):
            await update.message.reply_text("‚ùå –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –∏ –Ω–µ –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞.")
            return
        await update.message.reply_text(f"–í—ã –Ω–∞–ø–∏—Å–∞–ª–∏: {update.message.text}")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è - –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    init_db()
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    application = Application.builder().token(BOT_TOKEN).build()

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("create_profile", create_profile))
    application.add_handler(CommandHandler("admin", admin_panel))
    application.add_handler(CommandHandler("ban", ban_user))
    application.add_handler(CommandHandler("unban", unban_user))
    application.add_handler(CommandHandler("banned", list_banned_users))
    application.add_handler(CommandHandler("users", list_users))
    application.add_handler(CommandHandler("users_active", list_active_users))
    application.add_handler(CommandHandler("end_session", end_session))
    application.add_handler(CommandHandler("join_workplace", join_workplace))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, echo))

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    application.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == '__main__':
    main()
